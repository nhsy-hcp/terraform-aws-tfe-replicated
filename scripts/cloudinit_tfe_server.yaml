#cloud-config
write_files:
  - path: /etc/yum.repos.d/centos.repo
    permissions: '0640'
    content: |
      [base]
      name=CentOS-$releasever - Base
      baseurl=https://vault.centos.org/7.9.2009/os/$basearch
      gpgcheck=0
      gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
      
      #released updates 
      [updates]
      name=CentOS-$releasever - Updates
      baseurl=https://vault.centos.org/7.9.2009/updates/$basearch
      gpgcheck=0
      gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
      
      #additional packages that may be useful
      [extras]
      name=CentOS-$releasever - Extras
      baseurl=https://vault.centos.org/7.9.2009/extras/$basearch
      gpgcheck=0
      gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
      
      #additional packages that extend functionality of existing packages
      [centosplus]
      name=CentOS-$releasever - Plus
      baseurl=https://vault.centos.org/7.9.2009/centosplus/$basearch
      gpgcheck=0
      enabled=0
      gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
  - path: /etc/replicated.conf
    permissions: '0640'
    content: |
      {
          "DaemonAuthenticationType":          "password",
          "DaemonAuthenticationPassword":      "${tfe_password}",
          "TlsBootstrapType":                  "server-path",
          "TlsBootstrapHostname":              "${dns_hostname}.${dns_zonename}",
          "TlsBootstrapCert":                  "/var/tmp/server.crt",
          "TlsBootstrapKey":                   "/var/tmp/server.key",
          "BypassPreflightChecks":             true,
          "ImportSettingsFrom":                "/etc/tfe_settings.json",
          "LicenseFileLocation":               "/var/tmp/${filename_license}"
      }
  - path: /etc/tfe_settings.json
    permissions: '0640'
    content: |
      {
         "aws_instance_profile": {
              "value": "1"
          },
          "enc_password": {
              "value": "${tfe_password}"
          },
          "hairpin_addressing": {
              "value": "0"
          },
          "hostname": {
              "value": "${dns_hostname}.${dns_zonename}"
          },
          "pg_dbname": {
              "value": "${pg_dbname}"
          },
          "pg_netloc": {
              "value": "${pg_address}"
          },
          "pg_password": {
              "value": "${rds_password}"
          },
          "pg_user": {
              "value": "postgres"
          },
          "placement": {
              "value": "placement_s3"
          },
          "production_type": {
              "value": "external"
          },
          "s3_bucket": {
              "value": "${tfe_bucket}"
          },
          "s3_endpoint": {},
          "s3_region": {
              "value": "${region}"
          }
      }
  - path: /var/tmp/configure_server.sh 
    permissions: '0750'
    content: |
      #!/usr/bin/env bash
      exec &> >(tee -a /var/log/user-data.log)

      # Wait until there is internet before continue
      until ping -c1 google.com &>/dev/null; do
       echo "waiting for networking to initialise"
       sleep 3 
      done 

      # disable selinux
      setenforce 0
      getenforce
      sed -i 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/selinux/config
      
      # Set swappiness
      if test -f /sys/kernel/mm/transparent_hugepage/enabled; then
        echo never > /sys/kernel/mm/transparent_hugepage/enabled
      fi
      
      if test -f /sys/kernel/mm/transparent_hugepage/defrag; then
        echo never > /sys/kernel/mm/transparent_hugepage/defrag
      fi
      
      # heavy swap vm.swappiness=80
      # no swap vm.swappiness=1
      sysctl vm.swappiness=1
      sysctl vm.min_free_kbytes=67584
      sysctl vm.drop_caches=1
      # make it permanent over server reboots
      echo vm.swappiness=1 >> /etc/sysctl.conf
      echo vm.min_free_kbytes=67584 >> /etc/sysctl.conf
      
      # configure the disks and mount points
      SWAP=/dev/$(lsblk|grep nvme | grep -v nvme0n1 |sort -k 4 -r | awk '{print $1}'| awk '(NR==1)')
      DOCKER=/dev/$(lsblk|grep nvme | grep -v nvme0n1 |sort -k 4 -r | awk '{print $1}'| awk '(NR==2)')
      
      echo $SWAP
      echo $DOCKER
      
      # swap
      # if SWAP exists
      # we format if no format
      if [ -b $SWAP ]; then
      	blkid $SWAP
      	if [ $? -ne 0 ]; then
      		mkswap $SWAP
      	fi
      fi
      
      # if SWAP not in fstab
      # we add it
      grep "swap" /etc/fstab
      if [ $? -ne 0 ]; then
        SWAP_UUID=`blkid $SWAP| awk '{print $2}'`
      	echo "$SWAP_UUID swap swap defaults 0 0" | tee -a /etc/fstab
      	swapon -a
      fi
      
      # docker
      # if DOCKER exists
      # we format if no format
      if [ -b $DOCKER ]; then
      	blkid $DOCKER
      	if [ $? -ne 0 ]; then
      		mkfs.xfs $DOCKER
      	fi
      fi
      
      # if DOCKER not in fstab
      # we add it
      grep "/var/lib/docker" /etc/fstab
      if [ $? -ne 0 ]; then
        DOCKER_UUID=`blkid $DOCKER| awk '{print $2}'`
      	echo "$DOCKER_UUID /var/lib/docker xfs defaults 0 0" | tee -a /etc/fstab
      	mkdir -p /var/lib/docker
      	mount -a
      fi
      
      # install requirements for tfe
      #yum -y update
      yum -y install tree unzip docker
      systemctl enable docker
      systemctl start docker
      sed -i 's/"defaultAction":\s*"SCMP_ACT_ERRNO"/"defaultAction": "SCMP_ACT_TRACE"/1' /etc/docker/seccomp.json
      systemctl restart docker
  - path: /var/tmp/download_and_unpack_software.sh 
    permissions: '0750'
    content: |
      #!/usr/bin/env bash
      exec &> >(tee -a /var/log/user-data.log)

      # disable selinux
      setenforce 0
      getenforce
      
      # install aws cli
      pushd /var/tmp
      curl -sLo "awscliv2.zip" "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
      unzip -q awscliv2.zip
      ./aws/install --bin-dir /usr/bin --install-dir /usr/local/aws-cli --update
      #yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
      #systemctl enable amazon-ssm-agent
      #systemctl start amazon-ssm-agent
      
      # Download files from the bucket
      aws s3 cp s3://${software_bucket}/${filename_license} /var/tmp/${filename_license}
      aws s3 cp s3://${software_bucket}/certificate_pem /var/tmp/certificate_pem
      aws s3 cp s3://${software_bucket}/issuer_pem /var/tmp/issuer_pem
      aws s3 cp s3://${software_bucket}/private_key_pem /var/tmp/server.key
      
      # Create a full chain from the certificates
      cat /var/tmp/certificate_pem >> /var/tmp/server.crt
      cat /var/tmp/issuer_pem >> /var/tmp/server.crt
      chmod 644 /var/tmp/*.crt
      chmod 644 /var/tmp/*.key
  - path: /var/tmp/install_tfe.sh   
    permissions: '0750'
    content: |
      #!/usr/bin/env bash
      exec &> >(tee -a /var/log/user-data.log)

      # Get the public IP of the instance
      #export PUBLIC_IP=`curl -s http://169.254.169.254/latest/meta-data/public-ipv4`
      #export PRIVATE_IP=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4`
      
      # disable selinux
      setenforce 0
      getenforce
      
      pushd /var/tmp
      curl -sLo install.sh https://install.terraform.io/ptfe/stable
      chmod +x ./install.sh
      
      if [ "${tfe_release_sequence}" ] ; then
        ./install.sh release-sequence=${tfe_release_sequence} no-docker no-proxy private-address=${tfe_private_ip} public-address=${tfe_public_ip}
      else
        ./install.sh no-docker no-proxy private-address=${tfe_private_ip} public-address=${tfe_public_ip}
      fi
runcmd:
  - /var/tmp/configure_server.sh
  - /var/tmp/download_and_unpack_software.sh
  - sleep 30
  - /var/tmp/install_tfe.sh
